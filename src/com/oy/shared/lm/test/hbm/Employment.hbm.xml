<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- 

  This mapping demonstrates the use of Hibernate with
  all-handwritten SQL!
     
  This version is for Sybase/mssql
-->
<hibernate-mapping default-access="field" package="org.hibernate.test.sql">
  <class name="Organization">
    <id column="orgid" name="id" unsaved-value="0">
      <generator class="increment"/>
    </id>
    <property name="name" not-null="true"/>
    <set inverse="true" name="employments" order-by="DUMMY">
      <key column="employer"/>
      <!-- only needed for DDL generation -->
      <one-to-many class="Employment"/>
      <loader query-ref="organizationEmployments"/>
    </set>
    <query-list name="currentEmployments" query-ref="organizationCurrentEmployments"/>
    <loader query-ref="organization"/>
    <sql-insert>INSERT INTO ORGANIZATION (NAME, ORGID) VALUES ( UPPER(?), ? )</sql-insert>
    <sql-update>UPDATE ORGANIZATION SET NAME=UPPER(?) WHERE ORGID=?</sql-update>
    <sql-delete>DELETE FROM ORGANIZATION WHERE ORGID=?</sql-delete>
  </class>
  <class name="Person">
    <id column="perid" name="id" unsaved-value="0">
      <generator class="increment"/>
    </id>
    <property name="name" not-null="true"/>
    <loader query-ref="person"/>
    <sql-insert>INSERT INTO PERSON (NAME, PERID) VALUES ( UPPER(?), ? )</sql-insert>
    <sql-update>UPDATE PERSON SET NAME=UPPER(?) WHERE PERID=?</sql-update>
    <sql-delete>DELETE FROM PERSON WHERE PERID=?</sql-delete>
  </class>
  <class name="Employment">
    <id column="empid" name="employmentId" unsaved-value="0">
      <generator class="increment"/>
    </id>
    <many-to-one name="employee" not-null="true" update="false"/>
    <many-to-one name="employer" not-null="true" update="false"/>
    <property insert="false" name="startDate" not-null="true" update="false"/>
    <property insert="false" name="endDate"/>
    <property name="regionCode" update="false"/>
    <property name="salary" type="org.hibernate.test.sql.MonetaryAmountUserType">
      <column name="VALUE" sql-type="float"/>
      <column name="CURRENCY"/>
    </property>
    <loader query-ref="employment"/>
    <sql-insert>
			INSERT INTO EMPLOYMENT 
				(EMPLOYEE, EMPLOYER, STARTDATE, REGIONCODE, VALUE, CURRENCY, EMPID) 
				VALUES (?, ?, getDate(), UPPER(?), ?, ?, ?)
		</sql-insert>
    <sql-update>UPDATE EMPLOYMENT SET ENDDATE=?, VALUE=?, CURRENCY=? WHERE EMPID=?</sql-update>
    <sql-delete>DELETE FROM EMPLOYMENT WHERE EMPID=?</sql-delete>
  </class>
  <sql-query name="person">
		<return alias="p" class="Person" lock-mode="upgrade"/>
		SELECT NAME AS {p.name}, PERID AS {p.id} FROM PERSON WHERE PERID=? /*FOR UPDATE*/
	</sql-query>
  <sql-query name="organization">
		<return alias="org" class="Organization"/>
		<return-join alias="emp" property="org.employments"/>
		SELECT {org.*}, {emp.*}
		FROM ORGANIZATION org
			LEFT OUTER JOIN EMPLOYMENT emp ON org.ORGID = emp.EMPLOYER
		WHERE org.ORGID=?
	</sql-query>
  <!--sql-query name="organization">
		<return alias="org" class="Organization"/>
		SELECT NAME AS {org.name}, ORGID AS {org.id} FROM ORGANIZATION
		WHERE ORGID=?
	</sql-query-->
  <sql-query flush-mode="never" name="allOrganizationsWithEmployees">
		<return alias="org" class="Organization"/>
		SELECT DISTINCT org.NAME AS {org.name}, org.ORGID AS {org.id} 
		FROM ORGANIZATION org
		INNER JOIN EMPLOYMENT e ON e.EMPLOYER = org.ORGID
	</sql-query>
  <sql-query name="orgNamesOnly">
		<return-scalar column="NAME" type="string"/>
		SELECT org.NAME FROM ORGANIZATION org
	</sql-query>
  <sql-query name="orgNamesAndOrgs">
		<return-scalar column="thename" type="string"/>
		<return alias="org" class="Organization"/>
		SELECT org.NAME AS thename, org.NAME AS {org.name}, org.ORGID AS {org.id} 
		FROM ORGANIZATION org
		ORDER BY thename
	</sql-query>
  <sql-query name="orgsAndOrgNames">
		<return alias="org" class="Organization"/>
		<return-scalar column="thename" type="string"/>
		SELECT org.NAME AS thename, org.NAME AS {org.name}, org.ORGID AS {org.id} 
		FROM ORGANIZATION org
		ORDER BY thename
	</sql-query>
  <sql-query name="orgIdsAndOrgNames">
		<return-scalar column="orgid" type="long"/>
		<return-scalar column="thename" type="string"/>
		SELECT NAME AS thename, ORGID AS orgid
		FROM ORGANIZATION
		ORDER BY thename
	</sql-query>
  <sql-query name="employment">
		<return alias="emp" class="Employment"/>
		SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer}, 
			STARTDATE AS {emp.startDate}, ENDDATE AS {emp.endDate},
			REGIONCODE as {emp.regionCode}, EMPID AS {emp.id}
		FROM EMPLOYMENT
		WHERE EMPID = ?
	</sql-query>
  <sql-query name="organizationEmployments">
		<load-collection alias="empcol" role="Organization.employments"/>
		SELECT {empcol.*}
		FROM EMPLOYMENT empcol
		WHERE EMPLOYER = :id
		ORDER BY STARTDATE ASC, EMPLOYEE ASC
	</sql-query>
  <sql-query name="organizationCurrentEmployments">
		<return alias="emp" class="Employment">
      <return-property name="salary">
        <!-- as multi column properties are not supported via the
		      {}-syntax, we need to provide an explicit column list for salary via <return-property> -->
        <return-column name="VALUE"/>
        <return-column name="CURRENCY"/>
      </return-property>
      <!-- Here we are remapping endDate. Notice that we can still use {emp.endDate} in the SQL. -->
      <return-property column="myEndDate" name="endDate"/>
    </return>
		<synchronize table="EMPLOYMENT"/>
		SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer}, 
			STARTDATE AS {emp.startDate}, ENDDATE AS {emp.endDate},
			REGIONCODE as {emp.regionCode}, EMPID AS {emp.id}, VALUE, CURRENCY
		FROM EMPLOYMENT
		WHERE EMPLOYER = :id AND ENDDATE IS NULL
		ORDER BY STARTDATE ASC
	</sql-query>
  <sql-query callable="true" name="simpleScalar_MSSP">
	 <return-scalar column="name" type="string"/>
	 <return-scalar column="value" type="long"/>
	 { call simpleScalar(:number) }
	</sql-query>
  <sql-query callable="true" name="paramhandling">
	 <return-scalar column="value" type="long"/>
	 <return-scalar column="value2" type="long"/>
	 { call paramHandling(?,?) }
	</sql-query>
  <sql-query callable="true" name="selectAllEmployees_MSSP">
		<return alias="" class="Employment">
      <return-property column="EMPLOYEE" name="employee"/>
      <return-property column="EMPLOYER" name="employer"/>
      <return-property column="STARTDATE" name="startDate"/>
      <return-property column="ENDDATE" name="endDate"/>
      <return-property column="REGIONCODE" name="regionCode"/>
      <return-property column="EMPID" name="id"/>
      <return-property name="salary">
        <!-- as multi column properties are not supported via the
		      {}-syntax, we need to provide an explicit column list for salary via <return-property> -->
        <return-column name="VALUE"/>
        <return-column name="CURRENCY"/>
      </return-property>
    </return>
	 { call selectAllEmployments() }
	</sql-query>
</hibernate-mapping>
